$date
	Sun Dec 24 14:50:00 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module TEST $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RS2_E [4:0] $end
$var wire 5 - RS1_E [4:0] $end
$var wire 5 . RDW [4:0] $end
$var wire 5 / RDM [4:0] $end
$var wire 5 0 RDE [4:0] $end
$var wire 32 1 RD2E [31:0] $end
$var wire 32 2 RD1E [31:0] $end
$var wire 32 3 PCTargetE [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 5 PCPlus4W [31:0] $end
$var wire 32 6 PCPlus4M [31:0] $end
$var wire 32 7 PCPlus4E [31:0] $end
$var wire 32 8 PCPlus4D [31:0] $end
$var wire 32 9 PCE [31:0] $end
$var wire 32 : PCD [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 1 < MemWriteE $end
$var wire 32 = InstrD [31:0] $end
$var wire 32 > ImmExtE [31:0] $end
$var wire 2 ? ForwardBE [1:0] $end
$var wire 2 @ ForwardAE [1:0] $end
$var wire 1 A BranchE $end
$var wire 1 B ALUSrcE $end
$var wire 32 C ALUResultW [31:0] $end
$var wire 32 D ALUResultM [31:0] $end
$var wire 3 E ALUControlE [2:0] $end
$scope module Decode $end
$var wire 3 F ALUControlE [2:0] $end
$var wire 1 B ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 G ImmExtE [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 32 H PCE [31:0] $end
$var wire 32 I PCPlus4E [31:0] $end
$var wire 32 J RD1E [31:0] $end
$var wire 32 K RD2E [31:0] $end
$var wire 5 L RDE [4:0] $end
$var wire 5 M RS1E [4:0] $end
$var wire 5 N RS2E [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 O ResultW [31:0] $end
$var wire 1 ' ResultSrcE $end
$var wire 1 P ResultSrcD $end
$var wire 1 ( RegWriteW $end
$var wire 1 Q RegWriteD $end
$var wire 5 R RdD [4:0] $end
$var wire 5 S RS2D [4:0] $end
$var wire 5 T RS1D [4:0] $end
$var wire 5 U RDW [4:0] $end
$var wire 32 V RD2D [31:0] $end
$var wire 32 W RD1D [31:0] $end
$var wire 32 X PCPlus4D [31:0] $end
$var wire 32 Y PCD [31:0] $end
$var wire 1 Z MemWriteD $end
$var wire 32 [ InstrD [31:0] $end
$var wire 2 \ ImmSrcD [1:0] $end
$var wire 32 ] ImmExtD [31:0] $end
$var wire 1 ^ BranchD $end
$var wire 1 _ ALUSrcD $end
$var wire 3 ` ALUControlD [2:0] $end
$var reg 3 a ALUControlD_reg [2:0] $end
$var reg 1 B ALUSrcD_reg $end
$var reg 1 A BranchD_reg $end
$var reg 32 b ImmExtD_reg [31:0] $end
$var reg 1 c MemWriteD_reg $end
$var reg 32 d PCD_reg [31:0] $end
$var reg 32 e PCPlus4D_reg [31:0] $end
$var reg 32 f RD1D_reg [31:0] $end
$var reg 32 g RD2D_reg [31:0] $end
$var reg 5 h RDD_reg [4:0] $end
$var reg 5 i RS1D_reg [4:0] $end
$var reg 5 j RS2D_reg [4:0] $end
$var reg 1 k RegWriteD_reg $end
$var reg 2 l ResultSrcD_reg [1:0] $end
$scope module RegFile $end
$var wire 5 m A1 [4:0] $end
$var wire 5 n A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( WE3 $end
$var wire 32 o WD3 [31:0] $end
$var wire 32 p RD2 [31:0] $end
$var wire 32 q RD1 [31:0] $end
$var wire 5 r A3 [4:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 32 s In [31:0] $end
$var wire 32 t Imm_Ext [31:0] $end
$var wire 2 u ImmSrc [1:0] $end
$upscope $end
$scope module ctrl_unit $end
$var wire 7 v Op [6:0] $end
$var wire 3 w funct3 [2:0] $end
$var wire 7 x funct7 [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 Z MemWrite $end
$var wire 2 y ImmSrc [1:0] $end
$var wire 1 ^ Branch $end
$var wire 1 _ ALUSrc $end
$var wire 2 z ALUOp [1:0] $end
$var wire 3 { ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 | funct3 [2:0] $end
$var wire 7 } funct7 [6:0] $end
$var wire 7 ~ op [6:0] $end
$var wire 2 !" ALUOp [1:0] $end
$var wire 3 "" ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 #" Op [6:0] $end
$var wire 1 P ResultSrc $end
$var wire 1 Q RegWrite $end
$var wire 1 Z MemWrite $end
$var wire 2 $" ImmSrc [1:0] $end
$var wire 1 ^ Branch $end
$var wire 1 _ ALUSrc $end
$var wire 2 %" ALUOp [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 3 &" ALUControlE [2:0] $end
$var wire 1 B ALUSrcE $end
$var wire 1 A BranchE $end
$var wire 32 '" ImmExtE [31:0] $end
$var wire 1 < MemWriteE $end
$var wire 1 ; MemWriteM $end
$var wire 32 (" PCE [31:0] $end
$var wire 32 )" PCPlus4E [31:0] $end
$var wire 32 *" PCPlus4M [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 +" RD1E [31:0] $end
$var wire 32 ," RD2E [31:0] $end
$var wire 5 -" RdE [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ' ResultSrcE $end
$var wire 1 & ResultSrcM $end
$var wire 32 ." WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 /" ZeroE $end
$var wire 32 0" SrcBE [31:0] $end
$var wire 32 1" SrcAE [31:0] $end
$var wire 32 2" ResultW [31:0] $end
$var wire 1 ) RegWriteM $end
$var wire 5 3" RdM [4:0] $end
$var wire 32 4" RD2E_Mux [31:0] $end
$var wire 32 5" PCTargetE [31:0] $end
$var wire 2 6" ForwardBE [1:0] $end
$var wire 2 7" ForwardAE [1:0] $end
$var wire 32 8" ALUResultM [31:0] $end
$var wire 32 9" ALUResultE [31:0] $end
$var reg 32 :" ALUResultM_reg [31:0] $end
$var reg 1 ;" MemWriteM_reg $end
$var reg 32 <" PCPlus4M_reg [31:0] $end
$var reg 5 =" RdM_reg [4:0] $end
$var reg 1 ) RegWriteM_reg $end
$var reg 1 >" ResultSrcM_reg $end
$var reg 32 ?" WriteDataM_reg [31:0] $end
$scope module ADDER_E $end
$var wire 32 @" a [31:0] $end
$var wire 32 A" b [31:0] $end
$var wire 32 B" c [31:0] $end
$upscope $end
$scope module ALU_E $end
$var wire 3 C" ALUControl [2:0] $end
$var wire 1 D" Carry $end
$var wire 1 E" OverFlow $end
$var wire 1 /" Zero $end
$var wire 32 F" Sum [31:0] $end
$var wire 32 G" Result [31:0] $end
$var wire 1 H" Negative $end
$var wire 1 I" Cout $end
$var wire 32 J" B [31:0] $end
$var wire 32 K" A [31:0] $end
$upscope $end
$scope module MUX3X1_1 $end
$var wire 32 L" a [31:0] $end
$var wire 32 M" c [31:0] $end
$var wire 2 N" s [1:0] $end
$var wire 32 O" d [31:0] $end
$var wire 32 P" b [31:0] $end
$upscope $end
$scope module MUX3X1_2 $end
$var wire 32 Q" a [31:0] $end
$var wire 32 R" c [31:0] $end
$var wire 2 S" s [1:0] $end
$var wire 32 T" d [31:0] $end
$var wire 32 U" b [31:0] $end
$upscope $end
$scope module MUX_E $end
$var wire 32 V" a [31:0] $end
$var wire 32 W" b [31:0] $end
$var wire 1 B s $end
$var wire 32 X" c [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 32 Y" PCD [31:0] $end
$var wire 32 Z" PCPlus4D [31:0] $end
$var wire 1 4 PCSrcE $end
$var wire 32 [" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 \" PC_F [31:0] $end
$var wire 32 ]" PCPlus4F [31:0] $end
$var wire 32 ^" PCF [31:0] $end
$var wire 32 _" InstrF [31:0] $end
$var wire 32 `" InstrD [31:0] $end
$var reg 32 a" InstrF_reg [31:0] $end
$var reg 32 b" PCF_reg [31:0] $end
$var reg 32 c" PCPlus4F_reg [31:0] $end
$scope module I_MEM $end
$var wire 1 " rst $end
$var wire 32 d" RD [31:0] $end
$var wire 32 e" A [31:0] $end
$upscope $end
$scope module MUX_FETCH $end
$var wire 32 f" b [31:0] $end
$var wire 1 4 s $end
$var wire 32 g" c [31:0] $end
$var wire 32 h" a [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 i" b [31:0] $end
$var wire 32 j" c [31:0] $end
$var wire 32 k" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 l" PC_Next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 m" PC [31:0] $end
$upscope $end
$upscope $end
$scope module HazardUnit $end
$var wire 5 n" RDM [4:0] $end
$var wire 5 o" RS1E [4:0] $end
$var wire 5 p" RS2E [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 " rst $end
$var wire 1 ( RegWriteW $end
$var wire 5 q" RDW [4:0] $end
$var wire 2 r" ForwardBE [1:0] $end
$var wire 2 s" ForwardAE [1:0] $end
$upscope $end
$scope module Memory $end
$var wire 32 t" ALUResultM [31:0] $end
$var wire 1 ; MemWriteM $end
$var wire 32 u" PCPlus4M [31:0] $end
$var wire 32 v" PCPlus4W [31:0] $end
$var wire 5 w" RdM [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 & ResultSrcM $end
$var wire 32 x" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 % ResultSrcW $end
$var wire 1 ( RegWriteW $end
$var wire 32 y" ReadDataW [31:0] $end
$var wire 32 z" ReadDataM [31:0] $end
$var wire 5 {" RdW [4:0] $end
$var wire 32 |" ALUResultW [31:0] $end
$var reg 32 }" ALUResultW_reg [31:0] $end
$var reg 32 ~" PCPlus4W_reg [31:0] $end
$var reg 32 !# RdW_reg [31:0] $end
$var reg 32 "# ReadDataW_reg [31:0] $end
$var reg 1 ( RegWriteW_reg $end
$var reg 1 % ResultSrcW_reg $end
$scope module DataMem $end
$var wire 32 ## A [31:0] $end
$var wire 32 $# WD [31:0] $end
$var wire 1 ; WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 %# RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 &# ALUResultW [31:0] $end
$var wire 32 '# PCPlus4W [31:0] $end
$var wire 32 (# ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 )# ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 *# a [31:0] $end
$var wire 32 +# b [31:0] $end
$var wire 1 % s $end
$var wire 32 ,# c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 ,#
b0 +#
b0 *#
b0 )#
b0 (#
b0 '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
b0 w"
b0 v"
b0 u"
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b100 l"
b0 k"
b100 j"
b100 i"
b100 h"
b100 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b100 ]"
b100 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
0I"
0H"
b0 G"
b0 F"
0E"
0D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
0>"
b0 ="
b0 <"
0;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
1/"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
0k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
0c
b0 b
b0 a
b0 `
0_
0^
b0 ]
b0 \
b0 [
0Z
b0 Y
b0 X
b0 W
b0 V
b0 U
b0 T
b0 S
b0 R
0Q
0P
b0 O
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
0B
0A
b0 @
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b0 8
b0 7
b0 6
b0 5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#2
1!
#4
0!
#6
1!
#8
0!
#10
1!
#12
0!
#14
1!
#16
0!
#18
1!
#20
b10100000000001010010011 _"
b10100000000001010010011 d"
0!
1"
#22
1Q
1_
b1100000000001100010011 _"
b1100000000001100010011 d"
b101 ]
b101 t
bx V
bx p
b1000 \"
b1000 g"
b1000 l"
b101 n
b10011 v
b10011 ~
b10011 #"
b101 R
b101 S
b1000 ]"
b1000 h"
b1000 j"
b100 ^"
b100 e"
b100 k"
b100 m"
b100 8
b100 X
b100 Z"
b100 c"
b10100000000001010010011 =
b10100000000001010010011 [
b10100000000001010010011 s
b10100000000001010010011 `"
b10100000000001010010011 a"
1!
#24
0!
#26
0/"
b101 9"
b101 G"
b101 F"
b101 0"
b101 J"
b101 X"
b11 ]
b11 t
b10100110000001110110011 _"
b10100110000001110110011 d"
bx 4"
bx T"
bx V"
b11 n
b110 R
b11 S
b1100 \"
b1100 g"
b1100 l"
b101 ,
b101 N
b101 j
b101 p"
1B
1*
1k
b101 0
b101 L
b101 -"
b101 h
b100 7
b100 I
b100 )"
b100 e
b101 3
b101 5"
b101 B"
b101 ["
b101 f"
b101 >
b101 G
b101 b
b101 '"
b101 A"
b101 W"
bx 1
bx K
bx g
bx ,"
bx Q"
b1000 8
b1000 X
b1000 Z"
b1000 c"
b100 :
b100 Y
b100 Y"
b100 b"
b1100000000001100010011 =
b1100000000001100010011 [
b1100000000001100010011 s
b1100000000001100010011 `"
b1100000000001100010011 a"
b1100 ]"
b1100 h"
b1100 j"
b1000 ^"
b1000 e"
b1000 k"
b1000 m"
1!
#28
0!
#30
b11 9"
b11 G"
1Q
0_
b10010000000011 _"
b10010000000011 d"
b101 ]
b101 t
bx W
bx q
b10 z
b10 !"
b10 %"
b11 F"
b10000 \"
b10000 g"
b10000 l"
b101 n
b110 m
b110011 v
b110011 ~
b110011 #"
b111 R
b101 S
b110 T
b11 0"
b11 J"
b11 X"
bx z"
bx %#
b10000 ]"
b10000 h"
b10000 j"
b1100 ^"
b1100 e"
b1100 k"
b1100 m"
b1100 8
b1100 X
b1100 Z"
b1100 c"
b1000 :
b1000 Y
b1000 Y"
b1000 b"
b10100110000001110110011 =
b10100110000001110110011 [
b10100110000001110110011 s
b10100110000001110110011 `"
b10100110000001110110011 a"
b11 ,
b11 N
b11 j
b11 p"
b110 0
b110 L
b110 -"
b110 h
b1000 7
b1000 I
b1000 )"
b1000 e
b11 >
b11 G
b11 b
b11 '"
b11 A"
b11 W"
b111 3
b111 5"
b111 B"
b111 ["
b111 f"
b100 9
b100 H
b100 d
b100 ("
b100 @"
b100 6
b100 *"
b100 u"
b100 <"
b101 /
b101 3"
b101 ="
b101 n"
b101 w"
bx #
bx ."
bx x"
bx $#
bx ?"
b101 D
b101 8"
b101 :"
b101 M"
b101 R"
b101 t"
b101 ##
1)
1!
#32
0!
#34
b101 4"
b101 T"
b101 V"
b1 ?
b1 6"
b1 S"
b1 r"
0E"
0H"
0/"
b1000 9"
b1000 G"
1_
b10 @
b10 7"
b10 N"
b10 s"
b1000 F"
b0 ]
b0 t
b0 V
b0 p
b0 W
b0 q
1P
b0 z
b0 !"
b0 %"
b100000000010010010011 _"
b100000000010010010011 d"
b101 $
b101 O
b101 o
b101 2"
b101 P"
b101 U"
b101 )#
b101 ,#
b101 .
b101 U
b101 r
b101 q"
b101 {"
b101 0"
b101 J"
b101 X"
b11 1"
b11 K"
b11 O"
b0 n
b0 m
b10 w
b10 |
b11 v
b11 ~
b11 #"
b1000 R
b0 S
b0 T
b10100 \"
b10100 g"
b10100 l"
1(
b101 C
b101 |"
b101 }"
b101 &#
b101 *#
b100 5
b100 v"
b100 '#
b100 ~"
b101 !#
bx +
bx y"
bx "#
bx (#
bx +#
b1000 6
b1000 *"
b1000 u"
b1000 <"
b110 /
b110 3"
b110 ="
b110 n"
b110 w"
b11 D
b11 8"
b11 :"
b11 M"
b11 R"
b11 t"
b11 ##
b101 ,
b101 N
b101 j
b101 p"
b110 -
b110 M
b110 i
b110 o"
0B
b111 0
b111 L
b111 -"
b111 h
b1100 7
b1100 I
b1100 )"
b1100 e
b101 >
b101 G
b101 b
b101 '"
b101 A"
b101 W"
b1101 3
b1101 5"
b1101 B"
b1101 ["
b1101 f"
b1000 9
b1000 H
b1000 d
b1000 ("
b1000 @"
bx 2
bx J
bx f
bx +"
bx L"
b10000 8
b10000 X
b10000 Z"
b10000 c"
b1100 :
b1100 Y
b1100 Y"
b1100 b"
b10010000000011 =
b10010000000011 [
b10010000000011 s
b10010000000011 `"
b10010000000011 a"
b10100 ]"
b10100 h"
b10100 j"
b10000 ^"
b10000 e"
b10000 k"
b10000 m"
1!
#36
0!
#38
1/"
b0 9"
b0 G"
b0 F"
b0 ?
b0 6"
b0 S"
b0 r"
b0 @
b0 7"
b0 N"
b0 s"
b0 1"
b0 K"
b0 O"
b0 4"
b0 T"
b0 V"
b100101000000010100110011 _"
b100101000000010100110011 d"
b1 ]
b1 t
bx V
bx p
0P
b0 0"
b0 J"
b0 X"
b11000 \"
b11000 g"
b11000 l"
b1 n
b0 w
b0 |
b10011 v
b10011 ~
b10011 #"
b1001 R
b1 S
1'
b11 $
b11 O
b11 o
b11 2"
b11 P"
b11 U"
b11 )#
b11 ,#
b110 .
b110 U
b110 r
b110 q"
b110 {"
b11000 ]"
b11000 h"
b11000 j"
b10100 ^"
b10100 e"
b10100 k"
b10100 m"
b10100 8
b10100 X
b10100 Z"
b10100 c"
b10000 :
b10000 Y
b10000 Y"
b10000 b"
b100000000010010010011 =
b100000000010010010011 [
b100000000010010010011 s
b100000000010010010011 `"
b100000000010010010011 a"
b0 ,
b0 N
b0 j
b0 p"
b0 -
b0 M
b0 i
b0 o"
b1 l
1B
b1000 0
b1000 L
b1000 -"
b1000 h
b10000 7
b10000 I
b10000 )"
b10000 e
b0 >
b0 G
b0 b
b0 '"
b0 A"
b0 W"
b1100 3
b1100 5"
b1100 B"
b1100 ["
b1100 f"
b1100 9
b1100 H
b1100 d
b1100 ("
b1100 @"
b0 1
b0 K
b0 g
b0 ,"
b0 Q"
b0 2
b0 J
b0 f
b0 +"
b0 L"
b1100 6
b1100 *"
b1100 u"
b1100 <"
b111 /
b111 3"
b111 ="
b111 n"
b111 w"
b101 #
b101 ."
b101 x"
b101 $#
b101 ?"
b1000 D
b1000 8"
b1000 :"
b1000 M"
b1000 R"
b1000 t"
b1000 ##
b11 C
b11 |"
b11 }"
b11 &#
b11 *#
b1000 5
b1000 v"
b1000 '#
b1000 ~"
b110 !#
1!
#40
0!
#42
0/"
b1 9"
b1 G"
1Q
0_
b1 F"
b1001 ]
b1001 t
bx W
bx q
b10 z
b10 !"
b10 %"
bx _"
bx d"
b1000 $
b1000 O
b1000 o
b1000 2"
b1000 P"
b1000 U"
b1000 )#
b1000 ,#
b111 .
b111 U
b111 r
b111 q"
b111 {"
b0 z"
b0 %#
0'
b1 0"
b1 J"
b1 X"
bx 4"
bx T"
bx V"
b1001 n
b1000 m
b110011 v
b110011 ~
b110011 #"
b1010 R
b1001 S
b1000 T
b11100 \"
b11100 g"
b11100 l"
b1000 C
b1000 |"
b1000 }"
b1000 &#
b1000 *#
b1100 5
b1100 v"
b1100 '#
b1100 ~"
b111 !#
b10000 6
b10000 *"
b10000 u"
b10000 <"
b1000 /
b1000 3"
b1000 ="
b1000 n"
b1000 w"
b0 #
b0 ."
b0 x"
b0 $#
b0 ?"
b0 D
b0 8"
b0 :"
b0 M"
b0 R"
b0 t"
b0 ##
1&
1>"
b1 ,
b1 N
b1 j
b1 p"
b0 l
b1001 0
b1001 L
b1001 -"
b1001 h
b10100 7
b10100 I
b10100 )"
b10100 e
b1 >
b1 G
b1 b
b1 '"
b1 A"
b1 W"
b10001 3
b10001 5"
b10001 B"
b10001 ["
b10001 f"
b10000 9
b10000 H
b10000 d
b10000 ("
b10000 @"
bx 1
bx K
bx g
bx ,"
bx Q"
b11000 8
b11000 X
b11000 Z"
b11000 c"
b10100 :
b10100 Y
b10100 Y"
b10100 b"
b100101000000010100110011 =
b100101000000010100110011 [
b100101000000010100110011 s
b100101000000010100110011 `"
b100101000000010100110011 a"
b11100 ]"
b11100 h"
b11100 j"
b11000 ^"
b11000 e"
b11000 k"
b11000 m"
1!
#44
0!
#46
0E"
0H"
0/"
b1 @
b1 7"
b1 N"
b1 s"
xQ
bx `
bx {
bx ""
b1 4"
b1 T"
b1 V"
b1 9"
b1 G"
x_
b10 ?
b10 6"
b10 S"
b10 r"
bx ]
bx t
bx \
bx u
bx y
bx $"
xZ
xP
x^
bx z
bx !"
bx %"
b1 F"
b100000 \"
b100000 g"
b100000 l"
bx n
bx m
bx x
bx }
bx w
bx |
bx v
bx ~
bx #"
bx R
bx S
bx T
b1 0"
b1 J"
b1 X"
b0 1"
b0 K"
b0 O"
bx z"
bx %#
b0 $
b0 O
b0 o
b0 2"
b0 P"
b0 U"
b0 )#
b0 ,#
b1000 .
b1000 U
b1000 r
b1000 q"
b1000 {"
b100000 ]"
b100000 h"
b100000 j"
b11100 ^"
b11100 e"
b11100 k"
b11100 m"
b11100 8
b11100 X
b11100 Z"
b11100 c"
b11000 :
b11000 Y
b11000 Y"
b11000 b"
bx =
bx [
bx s
bx `"
bx a"
b1001 ,
b1001 N
b1001 j
b1001 p"
b1000 -
b1000 M
b1000 i
b1000 o"
0B
b1010 0
b1010 L
b1010 -"
b1010 h
b11000 7
b11000 I
b11000 )"
b11000 e
b1001 >
b1001 G
b1001 b
b1001 '"
b1001 A"
b1001 W"
b11101 3
b11101 5"
b11101 B"
b11101 ["
b11101 f"
b10100 9
b10100 H
b10100 d
b10100 ("
b10100 @"
bx 2
bx J
bx f
bx +"
bx L"
b10100 6
b10100 *"
b10100 u"
b10100 <"
b1001 /
b1001 3"
b1001 ="
b1001 n"
b1001 w"
bx #
bx ."
bx x"
bx $#
bx ?"
b1 D
b1 8"
b1 :"
b1 M"
b1 R"
b1 t"
b1 ##
0&
0>"
1%
b0 C
b0 |"
b0 }"
b0 &#
b0 *#
b10000 5
b10000 v"
b10000 '#
b10000 ~"
b1000 !#
b0 +
b0 y"
b0 "#
b0 (#
b0 +#
1!
#48
0!
#50
xE"
xH"
bx 4"
bx T"
bx V"
x4
bx 1"
bx K"
bx O"
bx ?
bx 6"
bx S"
bx r"
bx @
bx 7"
bx N"
bx s"
x/"
bx F"
bx 9"
bx G"
bx 0"
bx J"
bx X"
b1001 .
b1001 U
b1001 r
b1001 q"
b1001 {"
b1 $
b1 O
b1 o
b1 2"
b1 P"
b1 U"
b1 )#
b1 ,#
x'
bx \"
bx g"
bx l"
0%
b1 C
b1 |"
b1 }"
b1 &#
b1 *#
b10100 5
b10100 v"
b10100 '#
b10100 ~"
b1001 !#
bx +
bx y"
bx "#
bx (#
bx +#
b11000 6
b11000 *"
b11000 u"
b11000 <"
b1010 /
b1010 3"
b1010 ="
b1010 n"
b1010 w"
b1 #
b1 ."
b1 x"
b1 $#
b1 ?"
bx ,
bx N
bx j
bx p"
bx -
bx M
bx i
bx o"
bx E
bx F
bx a
bx &"
bx C"
b0x l
xB
xA
x<
xc
x*
xk
bx 0
bx L
bx -"
bx h
b11100 7
b11100 I
b11100 )"
b11100 e
bx >
bx G
bx b
bx '"
bx A"
bx W"
bx 3
bx 5"
bx B"
bx ["
bx f"
b11000 9
b11000 H
b11000 d
b11000 ("
b11000 @"
b100000 8
b100000 X
b100000 Z"
b100000 c"
b11100 :
b11100 Y
b11100 Y"
b11100 b"
b100100 ]"
b100100 h"
b100100 j"
b100000 ^"
b100000 e"
b100000 k"
b100000 m"
1!
#52
0!
#54
b1010 .
b1010 U
b1010 r
b1010 q"
b1010 {"
bx ]"
bx h"
bx j"
bx ^"
bx e"
bx k"
bx m"
b100100 8
b100100 X
b100100 Z"
b100100 c"
b100000 :
b100000 Y
b100000 Y"
b100000 b"
b100000 7
b100000 I
b100000 )"
b100000 e
b11100 9
b11100 H
b11100 d
b11100 ("
b11100 @"
b11100 6
b11100 *"
b11100 u"
b11100 <"
bx /
bx 3"
bx ="
bx n"
bx w"
bx #
bx ."
bx x"
bx $#
bx ?"
bx D
bx 8"
bx :"
bx M"
bx R"
bx t"
bx ##
x;
x;"
x&
x>"
x)
b11000 5
b11000 v"
b11000 '#
b11000 ~"
b1010 !#
1!
#56
0!
#58
bx $
bx O
bx o
bx 2"
bx P"
bx U"
bx )#
bx ,#
bx .
bx U
bx r
bx q"
bx {"
x%
x(
bx C
bx |"
bx }"
bx &#
bx *#
b11100 5
b11100 v"
b11100 '#
b11100 ~"
b0xxxxx !#
b100000 6
b100000 *"
b100000 u"
b100000 <"
b100100 7
b100100 I
b100100 )"
b100100 e
b100000 9
b100000 H
b100000 d
b100000 ("
b100000 @"
bx 8
bx X
bx Z"
bx c"
bx :
bx Y
bx Y"
bx b"
1!
#60
0!
#62
bx 7
bx I
bx )"
bx e
bx 9
bx H
bx d
bx ("
bx @"
b100100 6
b100100 *"
b100100 u"
b100100 <"
b100000 5
b100000 v"
b100000 '#
b100000 ~"
1!
#64
0!
#66
b100100 5
b100100 v"
b100100 '#
b100100 ~"
bx 6
bx *"
bx u"
bx <"
1!
#68
0!
#70
bx 5
bx v"
bx '#
bx ~"
1!
#72
0!
#74
1!
#76
0!
#78
1!
#80
0!
#82
1!
#84
0!
#86
1!
#88
0!
#90
1!
#92
0!
#94
1!
#96
0!
#98
1!
#100
0!
#102
1!
#104
0!
#106
1!
#108
0!
#110
1!
#112
0!
#114
1!
#116
0!
#118
1!
#120
0!
#122
1!
#124
0!
#126
1!
#128
0!
#130
1!
#132
0!
#134
1!
#136
0!
#138
1!
#140
0!
#142
1!
#144
0!
#146
1!
#148
0!
#150
1!
#152
0!
#154
1!
#156
0!
#158
1!
#160
0!
#162
1!
#164
0!
#166
1!
#168
0!
#170
1!
#172
0!
#174
1!
#176
0!
#178
1!
#180
0!
#182
1!
#184
0!
#186
1!
#188
0!
#190
1!
#192
0!
#194
1!
#196
0!
#198
1!
#200
0!
#202
1!
#204
0!
#206
1!
#208
0!
#210
1!
#212
0!
#214
1!
#216
0!
#218
1!
#220
0!
#222
1!
#224
0!
#226
1!
#228
0!
#230
1!
#232
0!
#234
1!
#236
0!
#238
1!
#240
0!
#242
1!
#244
0!
#246
1!
#248
0!
#250
1!
#252
0!
#254
1!
#256
0!
#258
1!
#260
0!
#262
1!
#264
0!
#266
1!
#268
0!
#270
1!
#272
0!
#274
1!
#276
0!
#278
1!
#280
0!
#282
1!
#284
0!
#286
1!
#288
0!
#290
1!
#292
0!
#294
1!
#296
0!
#298
1!
#300
0!
#302
1!
#304
0!
#306
1!
#308
0!
#310
1!
#312
0!
#314
1!
#316
0!
#318
1!
#320
0!
