$date
	Sat Dec 23 16:19:35 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module TEST $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # WriteDataM [31:0] $end
$var wire 32 $ ResultW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 & ResultSrcM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 ( RegWriteW $end
$var wire 1 ) RegWriteM $end
$var wire 1 * RegWriteE $end
$var wire 32 + ReadDataW [31:0] $end
$var wire 5 , RDW [4:0] $end
$var wire 5 - RDM [4:0] $end
$var wire 5 . RDE [4:0] $end
$var wire 32 / RD2E [31:0] $end
$var wire 32 0 RD1E [31:0] $end
$var wire 32 1 PCTargetE [31:0] $end
$var wire 1 2 PCSrcE $end
$var wire 32 3 PCPlus4W [31:0] $end
$var wire 32 4 PCPlus4M [31:0] $end
$var wire 32 5 PCPlus4E [31:0] $end
$var wire 32 6 PCPlus4D [31:0] $end
$var wire 32 7 PCE [31:0] $end
$var wire 32 8 PCD [31:0] $end
$var wire 1 9 MemWriteM $end
$var wire 1 : MemWriteE $end
$var wire 32 ; InstrD [31:0] $end
$var wire 32 < ImmExtE [31:0] $end
$var wire 1 = BranchE $end
$var wire 1 > ALUSrcE $end
$var wire 32 ? ALUResultW [31:0] $end
$var wire 32 @ ALUResultM [31:0] $end
$var wire 3 A ALUControlE [2:0] $end
$scope module Decode $end
$var wire 3 B ALUControlE [2:0] $end
$var wire 1 > ALUSrcE $end
$var wire 1 = BranchE $end
$var wire 32 C ImmExtE [31:0] $end
$var wire 1 : MemWriteE $end
$var wire 32 D PCE [31:0] $end
$var wire 32 E PCPlus4E [31:0] $end
$var wire 32 F RD1E [31:0] $end
$var wire 32 G RD2E [31:0] $end
$var wire 5 H RDE [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 I ResultW [31:0] $end
$var wire 1 ' ResultSrcE $end
$var wire 1 J ResultSrcD $end
$var wire 1 ( RegWriteW $end
$var wire 1 K RegWriteD $end
$var wire 5 L RdD [4:0] $end
$var wire 5 M RDW [4:0] $end
$var wire 32 N RD2D [31:0] $end
$var wire 32 O RD1D [31:0] $end
$var wire 32 P PCPlus4D [31:0] $end
$var wire 32 Q PCD [31:0] $end
$var wire 1 R MemWriteD $end
$var wire 32 S InstrD [31:0] $end
$var wire 2 T ImmSrcD [1:0] $end
$var wire 32 U ImmExtD [31:0] $end
$var wire 1 V BranchD $end
$var wire 1 W ALUSrcD $end
$var wire 3 X ALUControlD [2:0] $end
$var reg 3 Y ALUControlD_reg [2:0] $end
$var reg 1 > ALUSrcD_reg $end
$var reg 1 = BranchD_reg $end
$var reg 32 Z ImmExtD_reg [31:0] $end
$var reg 1 [ MemWriteD_reg $end
$var reg 32 \ PCD_reg [31:0] $end
$var reg 32 ] PCPlus4D_reg [31:0] $end
$var reg 32 ^ RD1D_reg [31:0] $end
$var reg 32 _ RD2D_reg [31:0] $end
$var reg 5 ` RDD_reg [4:0] $end
$var reg 1 a RegWriteD_reg $end
$var reg 2 b ResultSrcD_reg [1:0] $end
$scope module RegFile $end
$var wire 5 c A1 [4:0] $end
$var wire 5 d A2 [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 ( WE3 $end
$var wire 32 e WD3 [31:0] $end
$var wire 32 f RD2 [31:0] $end
$var wire 32 g RD1 [31:0] $end
$var wire 5 h A3 [4:0] $end
$upscope $end
$scope module SignExtend $end
$var wire 32 i In [31:0] $end
$var wire 32 j Imm_Ext [31:0] $end
$var wire 2 k ImmSrc [1:0] $end
$upscope $end
$scope module ctrl_unit $end
$var wire 7 l Op [6:0] $end
$var wire 3 m funct3 [2:0] $end
$var wire 7 n funct7 [6:0] $end
$var wire 1 J ResultSrc $end
$var wire 1 K RegWrite $end
$var wire 1 R MemWrite $end
$var wire 2 o ImmSrc [1:0] $end
$var wire 1 V Branch $end
$var wire 1 W ALUSrc $end
$var wire 2 p ALUOp [1:0] $end
$var wire 3 q ALUControl [2:0] $end
$scope module ALU_Decoder $end
$var wire 3 r funct3 [2:0] $end
$var wire 7 s funct7 [6:0] $end
$var wire 7 t op [6:0] $end
$var wire 2 u ALUOp [1:0] $end
$var wire 3 v ALUControl [2:0] $end
$upscope $end
$scope module Main_Decoder $end
$var wire 7 w Op [6:0] $end
$var wire 1 J ResultSrc $end
$var wire 1 K RegWrite $end
$var wire 1 R MemWrite $end
$var wire 2 x ImmSrc [1:0] $end
$var wire 1 V Branch $end
$var wire 1 W ALUSrc $end
$var wire 2 y ALUOp [1:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module Execute $end
$var wire 3 z ALUControlE [2:0] $end
$var wire 1 > ALUSrcE $end
$var wire 1 = BranchE $end
$var wire 32 { ImmExtE [31:0] $end
$var wire 1 : MemWriteE $end
$var wire 1 9 MemWriteM $end
$var wire 32 | PCE [31:0] $end
$var wire 32 } PCPlus4E [31:0] $end
$var wire 32 ~ PCPlus4M [31:0] $end
$var wire 1 2 PCSrcE $end
$var wire 32 !" RD1E [31:0] $end
$var wire 32 "" RD2E [31:0] $end
$var wire 5 #" RdE [4:0] $end
$var wire 5 $" RdM [4:0] $end
$var wire 1 * RegWriteE $end
$var wire 1 ) RegWriteM $end
$var wire 1 ' ResultSrcE $end
$var wire 1 & ResultSrcM $end
$var wire 32 %" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 &" ZeroE $end
$var wire 32 '" SrcBE [31:0] $end
$var wire 32 (" PCTargetE [31:0] $end
$var wire 32 )" ALUResultM [31:0] $end
$var wire 32 *" ALUResultE [31:0] $end
$var reg 32 +" ALUResultM_reg [31:0] $end
$var reg 1 ," MemWriteM_reg $end
$var reg 32 -" PCPlus4M_reg [31:0] $end
$var reg 5 ." RdM_reg [4:0] $end
$var reg 1 /" RegWriteM_reg $end
$var reg 1 0" ResultSrcM_reg $end
$var reg 32 1" WriteDataM_reg [31:0] $end
$scope module ADDER_E $end
$var wire 32 2" a [31:0] $end
$var wire 32 3" b [31:0] $end
$var wire 32 4" c [31:0] $end
$upscope $end
$scope module ALU_E $end
$var wire 32 5" A [31:0] $end
$var wire 3 6" ALUControl [2:0] $end
$var wire 1 7" Carry $end
$var wire 1 8" OverFlow $end
$var wire 1 &" Zero $end
$var wire 32 9" Sum [31:0] $end
$var wire 32 :" Result [31:0] $end
$var wire 1 ;" Negative $end
$var wire 1 <" Cout $end
$var wire 32 =" B [31:0] $end
$upscope $end
$scope module MUX_E $end
$var wire 32 >" a [31:0] $end
$var wire 32 ?" b [31:0] $end
$var wire 1 > s $end
$var wire 32 @" c [31:0] $end
$upscope $end
$upscope $end
$scope module Fetch $end
$var wire 32 A" PCD [31:0] $end
$var wire 32 B" PCPlus4D [31:0] $end
$var wire 1 2 PCSrcE $end
$var wire 32 C" PCTargetE [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 D" PC_F [31:0] $end
$var wire 32 E" PCPlus4F [31:0] $end
$var wire 32 F" PCF [31:0] $end
$var wire 32 G" InstrF [31:0] $end
$var wire 32 H" InstrD [31:0] $end
$var reg 32 I" InstrF_reg [31:0] $end
$var reg 32 J" PCF_reg [31:0] $end
$var reg 32 K" PCPlus4F_reg [31:0] $end
$scope module I_MEM $end
$var wire 1 " rst $end
$var wire 32 L" RD [31:0] $end
$var wire 32 M" A [31:0] $end
$upscope $end
$scope module MUX_FETCH $end
$var wire 32 N" b [31:0] $end
$var wire 1 2 s $end
$var wire 32 O" c [31:0] $end
$var wire 32 P" a [31:0] $end
$upscope $end
$scope module PCAdder $end
$var wire 32 Q" b [31:0] $end
$var wire 32 R" c [31:0] $end
$var wire 32 S" a [31:0] $end
$upscope $end
$scope module Program_Counter $end
$var wire 32 T" PC_Next [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var reg 32 U" PC [31:0] $end
$upscope $end
$upscope $end
$scope module Memory $end
$var wire 32 V" ALUResultM [31:0] $end
$var wire 1 9 MemWriteM $end
$var wire 32 W" PCPlus4M [31:0] $end
$var wire 32 X" PCPlus4W [31:0] $end
$var wire 5 Y" RdM [4:0] $end
$var wire 1 ) RegWriteM $end
$var wire 1 ( RegWriteW $end
$var wire 1 & ResultSrcM $end
$var wire 32 Z" WriteDataM [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 % ResultSrcW $end
$var wire 32 [" ReadDataW [31:0] $end
$var wire 32 \" ReadDataM [31:0] $end
$var wire 5 ]" RdW [4:0] $end
$var wire 32 ^" ALUResultW [31:0] $end
$var reg 32 _" ALUResultW_reg [31:0] $end
$var reg 32 `" PCPlus4W_reg [31:0] $end
$var reg 32 a" RdW_reg [31:0] $end
$var reg 32 b" ReadDataW_reg [31:0] $end
$var reg 1 c" RegWriteW_reg $end
$var reg 1 % ResultSrcW_reg $end
$scope module DataMem $end
$var wire 32 d" A [31:0] $end
$var wire 32 e" WD [31:0] $end
$var wire 1 9 WE $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 f" RD [31:0] $end
$upscope $end
$upscope $end
$scope module WriteBack $end
$var wire 32 g" ALUResultW [31:0] $end
$var wire 32 h" PCPlus4W [31:0] $end
$var wire 32 i" ReadDataW [31:0] $end
$var wire 1 % ResultSrcW $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 j" ResultW [31:0] $end
$scope module result_mux $end
$var wire 32 k" a [31:0] $end
$var wire 32 l" b [31:0] $end
$var wire 1 % s $end
$var wire 32 m" c [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 m"
b0 l"
b0 k"
b0 j"
b0 i"
b0 h"
b0 g"
b0 f"
b0 e"
b0 d"
0c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b0 U"
b100 T"
b0 S"
b100 R"
b100 Q"
b100 P"
b100 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b100 E"
b100 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
0<"
0;"
b0 :"
b0 9"
08"
07"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
00"
0/"
b0 ."
b0 -"
0,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
1&"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
0a
b0 `
b0 _
b0 ^
b0 ]
b0 \
0[
b0 Z
b0 Y
b0 X
0W
0V
b0 U
b0 T
b0 S
0R
b0 Q
b0 P
b0 O
b0 N
b0 M
b0 L
0K
0J
b0 I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
0>
0=
b0 <
b0 ;
0:
09
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
0(
0'
0&
0%
b0 $
b0 #
0"
0!
$end
#2
1!
#4
0!
#6
1!
#8
0!
#10
1!
#12
0!
#14
1!
#16
0!
#18
1!
#20
b1000 D"
b1000 O"
b1000 T"
b100 6
b100 P
b100 B"
b100 K"
b1000 E"
b1000 P"
b1000 R"
b100 F"
b100 M"
b100 S"
b100 U"
b1100000000001100010011 G"
b1100000000001100010011 L"
0!
1"
#22
1!
#24
1K
1W
b10100110000001110110011 G"
b10100110000001110110011 L"
b11 U
b11 j
bx N
bx f
b1100 D"
b1100 O"
b1100 T"
b11 d
b10011 l
b10011 t
b10011 w
b110 L
b1100 E"
b1100 P"
b1100 R"
b1000 F"
b1000 M"
b1000 S"
b1000 U"
b1000 6
b1000 P
b1000 B"
b1000 K"
b100 8
b100 Q
b100 A"
b100 J"
b1100000000001100010011 ;
b1100000000001100010011 S
b1100000000001100010011 i
b1100000000001100010011 H"
b1100000000001100010011 I"
b100 5
b100 E
b100 }
b100 ]
0!
#26
1!
#28
08"
0;"
0&"
b11 *"
b11 :"
1K
0W
b11 9"
b101 U
b101 j
bx O
bx g
b10 p
b10 u
b10 y
b10010000000011 G"
b10010000000011 L"
b11 '"
b11 ="
b11 @"
b101 d
b110 c
b110011 l
b110011 t
b110011 w
b111 L
b10000 D"
b10000 O"
b10000 T"
b100 4
b100 ~
b100 W"
b100 -"
1>
1*
1a
b110 .
b110 H
b110 #"
b110 `
b1000 5
b1000 E
b1000 }
b1000 ]
b11 <
b11 C
b11 Z
b11 {
b11 3"
b11 ?"
b111 1
b111 ("
b111 4"
b111 C"
b111 N"
b100 7
b100 D
b100 \
b100 |
b100 2"
bx /
bx G
bx _
bx ""
bx >"
b1100 6
b1100 P
b1100 B"
b1100 K"
b1000 8
b1000 Q
b1000 A"
b1000 J"
b10100110000001110110011 ;
b10100110000001110110011 S
b10100110000001110110011 i
b10100110000001110110011 H"
b10100110000001110110011 I"
b10000 E"
b10000 P"
b10000 R"
b1100 F"
b1100 M"
b1100 S"
b1100 U"
0!
#30
1!
#32
1W
x;"
x&"
x8"
bx *"
bx :"
b100000000010010010011 G"
b100000000010010010011 L"
b0 U
b0 j
b0 N
b0 f
b0 O
b0 g
1J
b0 p
b0 u
b0 y
b10100 D"
b10100 O"
b10100 T"
b0 d
b0 c
b10 m
b10 r
b11 l
b11 t
b11 w
b1000 L
bx '"
bx ="
bx @"
bx 9"
bx \"
bx f"
b10100 E"
b10100 P"
b10100 R"
b10000 F"
b10000 M"
b10000 S"
b10000 U"
b10000 6
b10000 P
b10000 B"
b10000 K"
b1100 8
b1100 Q
b1100 A"
b1100 J"
b10010000000011 ;
b10010000000011 S
b10010000000011 i
b10010000000011 H"
b10010000000011 I"
0>
b111 .
b111 H
b111 #"
b111 `
b1100 5
b1100 E
b1100 }
b1100 ]
b101 <
b101 C
b101 Z
b101 {
b101 3"
b101 ?"
b1101 1
b1101 ("
b1101 4"
b1101 C"
b1101 N"
b1000 7
b1000 D
b1000 \
b1000 |
b1000 2"
bx 0
bx F
bx ^
bx !"
bx 5"
b1000 4
b1000 ~
b1000 W"
b1000 -"
b110 -
b110 $"
b110 Y"
b110 ."
bx #
bx %"
bx Z"
bx e"
bx 1"
b11 @
b11 )"
b11 +"
b11 V"
b11 d"
1)
1/"
b100 3
b100 X"
b100 h"
b100 `"
0!
#34
1!
#36
08"
0;"
1&"
b0 *"
b0 :"
b0 9"
b1 U
b1 j
bx N
bx f
0J
b100101000000010100110011 G"
b100101000000010100110011 L"
b11 $
b11 I
b11 e
b11 j"
b11 m"
b110 ,
b110 M
b110 h
b110 ]"
1'
b0 '"
b0 ="
b0 @"
b1 d
b0 m
b0 r
b10011 l
b10011 t
b10011 w
b1001 L
b11000 D"
b11000 O"
b11000 T"
1(
1c"
b11 ?
b11 ^"
b11 _"
b11 g"
b11 k"
b1000 3
b1000 X"
b1000 h"
b1000 `"
b110 a"
bx +
bx ["
bx b"
bx i"
bx l"
b1100 4
b1100 ~
b1100 W"
b1100 -"
b111 -
b111 $"
b111 Y"
b111 ."
bx @
bx )"
bx +"
bx V"
bx d"
b1 b
1>
b1000 .
b1000 H
b1000 #"
b1000 `
b10000 5
b10000 E
b10000 }
b10000 ]
b0 <
b0 C
b0 Z
b0 {
b0 3"
b0 ?"
b1100 1
b1100 ("
b1100 4"
b1100 C"
b1100 N"
b1100 7
b1100 D
b1100 \
b1100 |
b1100 2"
b0 /
b0 G
b0 _
b0 ""
b0 >"
b0 0
b0 F
b0 ^
b0 !"
b0 5"
b10100 6
b10100 P
b10100 B"
b10100 K"
b10000 8
b10000 Q
b10000 A"
b10000 J"
b100000000010010010011 ;
b100000000010010010011 S
b100000000010010010011 i
b100000000010010010011 H"
b100000000010010010011 I"
b11000 E"
b11000 P"
b11000 R"
b10100 F"
b10100 M"
b10100 S"
b10100 U"
0!
#38
1!
#40
0&"
b1 *"
b1 :"
1K
0W
bx G"
bx L"
b1001 U
b1001 j
bx O
bx g
b10 p
b10 u
b10 y
b1 9"
b11100 D"
b11100 O"
b11100 T"
b1001 d
b1000 c
b110011 l
b110011 t
b110011 w
b1010 L
0'
b1 '"
b1 ="
b1 @"
b0 \"
b0 f"
bx $
bx I
bx e
bx j"
bx m"
b111 ,
b111 M
b111 h
b111 ]"
b11100 E"
b11100 P"
b11100 R"
b11000 F"
b11000 M"
b11000 S"
b11000 U"
b11000 6
b11000 P
b11000 B"
b11000 K"
b10100 8
b10100 Q
b10100 A"
b10100 J"
b100101000000010100110011 ;
b100101000000010100110011 S
b100101000000010100110011 i
b100101000000010100110011 H"
b100101000000010100110011 I"
b0 b
b1001 .
b1001 H
b1001 #"
b1001 `
b10100 5
b10100 E
b10100 }
b10100 ]
b1 <
b1 C
b1 Z
b1 {
b1 3"
b1 ?"
b10001 1
b10001 ("
b10001 4"
b10001 C"
b10001 N"
b10000 7
b10000 D
b10000 \
b10000 |
b10000 2"
bx /
bx G
bx _
bx ""
bx >"
b10000 4
b10000 ~
b10000 W"
b10000 -"
b1000 -
b1000 $"
b1000 Y"
b1000 ."
b0 #
b0 %"
b0 Z"
b0 e"
b0 1"
b0 @
b0 )"
b0 +"
b0 V"
b0 d"
1&
10"
bx ?
bx ^"
bx _"
bx g"
bx k"
b1100 3
b1100 X"
b1100 h"
b1100 `"
b111 a"
0!
#42
1!
#44
x;"
x&"
x8"
xK
bx X
bx q
bx v
bx *"
bx :"
xW
bx U
bx j
bx T
bx k
bx o
bx x
xR
xJ
xV
bx p
bx u
bx y
b0 $
b0 I
b0 e
b0 j"
b0 m"
b1000 ,
b1000 M
b1000 h
b1000 ]"
bx \"
bx f"
bx '"
bx ="
bx @"
bx 9"
bx d
bx c
bx n
bx s
bx m
bx r
bx l
bx t
bx w
bx L
b100000 D"
b100000 O"
b100000 T"
1%
b0 ?
b0 ^"
b0 _"
b0 g"
b0 k"
b10000 3
b10000 X"
b10000 h"
b10000 `"
b1000 a"
b0 +
b0 ["
b0 b"
b0 i"
b0 l"
b10100 4
b10100 ~
b10100 W"
b10100 -"
b1001 -
b1001 $"
b1001 Y"
b1001 ."
bx #
bx %"
bx Z"
bx e"
bx 1"
b1 @
b1 )"
b1 +"
b1 V"
b1 d"
0&
00"
0>
b1010 .
b1010 H
b1010 #"
b1010 `
b11000 5
b11000 E
b11000 }
b11000 ]
b1001 <
b1001 C
b1001 Z
b1001 {
b1001 3"
b1001 ?"
b11101 1
b11101 ("
b11101 4"
b11101 C"
b11101 N"
b10100 7
b10100 D
b10100 \
b10100 |
b10100 2"
bx 0
bx F
bx ^
bx !"
bx 5"
b11100 6
b11100 P
b11100 B"
b11100 K"
b11000 8
b11000 Q
b11000 A"
b11000 J"
bx ;
bx S
bx i
bx H"
bx I"
b100000 E"
b100000 P"
b100000 R"
b11100 F"
b11100 M"
b11100 S"
b11100 U"
0!
#46
1!
#48
bx D"
bx O"
bx T"
x'
x2
b1001 ,
b1001 M
b1001 h
b1001 ]"
b1 $
b1 I
b1 e
b1 j"
b1 m"
b100100 E"
b100100 P"
b100100 R"
b100000 F"
b100000 M"
b100000 S"
b100000 U"
b100000 6
b100000 P
b100000 B"
b100000 K"
b11100 8
b11100 Q
b11100 A"
b11100 J"
bx A
bx B
bx Y
bx z
bx 6"
b0x b
x>
x=
x:
x[
x*
xa
bx .
bx H
bx #"
bx `
b11100 5
b11100 E
b11100 }
b11100 ]
bx <
bx C
bx Z
bx {
bx 3"
bx ?"
bx 1
bx ("
bx 4"
bx C"
bx N"
b11000 7
b11000 D
b11000 \
b11000 |
b11000 2"
b11000 4
b11000 ~
b11000 W"
b11000 -"
b1010 -
b1010 $"
b1010 Y"
b1010 ."
bx @
bx )"
bx +"
bx V"
bx d"
0%
b1 ?
b1 ^"
b1 _"
b1 g"
b1 k"
b10100 3
b10100 X"
b10100 h"
b10100 `"
b1001 a"
bx +
bx ["
bx b"
bx i"
bx l"
0!
#50
1!
#52
bx $
bx I
bx e
bx j"
bx m"
b1010 ,
b1010 M
b1010 h
b1010 ]"
bx ?
bx ^"
bx _"
bx g"
bx k"
b11000 3
b11000 X"
b11000 h"
b11000 `"
b1010 a"
b11100 4
b11100 ~
b11100 W"
b11100 -"
bx -
bx $"
bx Y"
bx ."
x9
x,"
x&
x0"
x)
x/"
b100000 5
b100000 E
b100000 }
b100000 ]
b11100 7
b11100 D
b11100 \
b11100 |
b11100 2"
b100100 6
b100100 P
b100100 B"
b100100 K"
b100000 8
b100000 Q
b100000 A"
b100000 J"
bx E"
bx P"
bx R"
bx F"
bx M"
bx S"
bx U"
0!
#54
1!
#56
bx ,
bx M
bx h
bx ]"
bx 6
bx P
bx B"
bx K"
bx 8
bx Q
bx A"
bx J"
b100100 5
b100100 E
b100100 }
b100100 ]
b100000 7
b100000 D
b100000 \
b100000 |
b100000 2"
b100000 4
b100000 ~
b100000 W"
b100000 -"
x%
x(
xc"
b11100 3
b11100 X"
b11100 h"
b11100 `"
b0xxxxx a"
0!
#58
1!
#60
b100000 3
b100000 X"
b100000 h"
b100000 `"
b100100 4
b100100 ~
b100100 W"
b100100 -"
bx 5
bx E
bx }
bx ]
bx 7
bx D
bx \
bx |
bx 2"
0!
#62
1!
#64
bx 4
bx ~
bx W"
bx -"
b100100 3
b100100 X"
b100100 h"
b100100 `"
0!
#66
1!
#68
bx 3
bx X"
bx h"
bx `"
0!
#70
1!
#72
0!
#74
1!
#76
0!
#78
1!
#80
0!
#82
1!
#84
0!
#86
1!
#88
0!
#90
1!
#92
0!
#94
1!
#96
0!
#98
1!
#100
0!
#102
1!
#104
0!
#106
1!
#108
0!
#110
1!
#112
0!
#114
1!
#116
0!
#118
1!
#120
0!
#122
1!
#124
0!
#126
1!
#128
0!
#130
1!
#132
0!
#134
1!
#136
0!
#138
1!
#140
0!
#142
1!
#144
0!
#146
1!
#148
0!
#150
1!
#152
0!
#154
1!
#156
0!
#158
1!
#160
0!
#162
1!
#164
0!
#166
1!
#168
0!
#170
1!
#172
0!
#174
1!
#176
0!
#178
1!
#180
0!
#182
1!
#184
0!
#186
1!
#188
0!
#190
1!
#192
0!
#194
1!
#196
0!
#198
1!
#200
0!
#202
1!
#204
0!
#206
1!
#208
0!
#210
1!
#212
0!
#214
1!
#216
0!
#218
1!
#220
0!
#222
1!
#224
0!
#226
1!
#228
0!
#230
1!
#232
0!
#234
1!
#236
0!
#238
1!
#240
0!
#242
1!
#244
0!
#246
1!
#248
0!
#250
1!
#252
0!
#254
1!
#256
0!
#258
1!
#260
0!
#262
1!
#264
0!
#266
1!
#268
0!
#270
1!
#272
0!
#274
1!
#276
0!
#278
1!
#280
0!
#282
1!
#284
0!
#286
1!
#288
0!
#290
1!
#292
0!
#294
1!
#296
0!
#298
1!
#300
0!
#302
1!
#304
0!
#306
1!
#308
0!
#310
1!
#312
0!
#314
1!
#316
0!
#318
1!
#320
0!
